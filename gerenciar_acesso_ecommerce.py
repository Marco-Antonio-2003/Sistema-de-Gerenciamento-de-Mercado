#!/usr/bin/env python3
"""
Utilit√°rio para gerenciar o acesso ao m√≥dulo E-commerce (Mercado Livre)
Permite aos administradores conceder ou bloquear acesso aos usu√°rios
"""

import sys
import os
from base.banco import (
    listar_usuarios, 
    alterar_acesso_ecommerce, 
    listar_usuarios_sem_acesso_ecommerce,
    verificar_acesso_ecommerce,
    execute_query
)

def listar_todos_usuarios_com_status():
    """Lista todos os usu√°rios com seu status de acesso ao e-commerce"""
    try:
        query = """
        SELECT ID, USUARIO, EMPRESA, 
               COALESCE(ACESSO_ECOMMERCE, 'S') as ACESSO_ECOMMERCE
        FROM USUARIOS
        ORDER BY EMPRESA, USUARIO
        """
        usuarios = execute_query(query)
        
        print("\n=== USU√ÅRIOS E STATUS DE ACESSO AO E-COMMERCE ===")
        print(f"{'ID':<5} {'USU√ÅRIO':<20} {'EMPRESA':<20} {'ACESSO':<8}")
        print("-" * 60)
        
        for usuario in usuarios:
            id_user, nome, empresa, acesso = usuario
            status = "‚úÖ SIM" if acesso == 'S' else "‚ùå N√ÉO"
            print(f"{id_user:<5} {nome:<20} {empresa:<20} {status:<8}")
            
        return usuarios
        
    except Exception as e:
        print(f"Erro ao listar usu√°rios: {e}")
        return []

def bloquear_usuario():
    """Interface para bloquear acesso de um usu√°rio"""
    print("\n=== BLOQUEAR ACESSO AO E-COMMERCE ===")
    
    try:
        usuario_id = int(input("Digite o ID do usu√°rio para bloquear: "))
        
        # Verificar se o usu√°rio existe
        query = "SELECT USUARIO, EMPRESA FROM USUARIOS WHERE ID = ?"
        result = execute_query(query, (usuario_id,))
        
        if not result:
            print("‚ùå Usu√°rio n√£o encontrado!")
            return
            
        nome, empresa = result[0]
        print(f"Usu√°rio encontrado: {nome} (Empresa: {empresa})")
        
        confirmacao = input("Confirma o bloqueio? (s/N): ").lower()
        if confirmacao == 's':
            if alterar_acesso_ecommerce(usuario_id, False):
                print(f"‚úÖ Acesso ao e-commerce bloqueado para {nome}")
            else:
                print("‚ùå Erro ao bloquear acesso")
        else:
            print("Opera√ß√£o cancelada")
            
    except ValueError:
        print("‚ùå ID inv√°lido. Digite apenas n√∫meros.")
    except Exception as e:
        print(f"‚ùå Erro: {e}")

def conceder_acesso():
    """Interface para conceder acesso a um usu√°rio"""
    print("\n=== CONCEDER ACESSO AO E-COMMERCE ===")
    
    try:
        usuario_id = int(input("Digite o ID do usu√°rio para conceder acesso: "))
        
        # Verificar se o usu√°rio existe
        query = "SELECT USUARIO, EMPRESA FROM USUARIOS WHERE ID = ?"
        result = execute_query(query, (usuario_id,))
        
        if not result:
            print("‚ùå Usu√°rio n√£o encontrado!")
            return
            
        nome, empresa = result[0]
        print(f"Usu√°rio encontrado: {nome} (Empresa: {empresa})")
        
        confirmacao = input("Confirma a concess√£o de acesso? (s/N): ").lower()
        if confirmacao == 's':
            if alterar_acesso_ecommerce(usuario_id, True):
                print(f"‚úÖ Acesso ao e-commerce concedido para {nome}")
            else:
                print("‚ùå Erro ao conceder acesso")
        else:
            print("Opera√ß√£o cancelada")
            
    except ValueError:
        print("‚ùå ID inv√°lido. Digite apenas n√∫meros.")
    except Exception as e:
        print(f"‚ùå Erro: {e}")

def testar_acesso():
    """Interface para testar acesso de um usu√°rio"""
    print("\n=== TESTAR ACESSO AO E-COMMERCE ===")
    
    usuario = input("Digite o nome do usu√°rio: ").strip()
    empresa = input("Digite a empresa (ou Enter para pular): ").strip()
    
    if not empresa:
        empresa = None
        
    try:
        tem_acesso, motivo = verificar_acesso_ecommerce(usuario, empresa)
        
        print(f"\nUsu√°rio: {usuario}")
        if empresa:
            print(f"Empresa: {empresa}")
            
        if tem_acesso:
            print("‚úÖ ACESSO CONCEDIDO - Usu√°rio pode acessar o m√≥dulo Mercado Livre")
        else:
            print(f"‚ùå ACESSO NEGADO - {motivo}")
            
    except Exception as e:
        print(f"‚ùå Erro ao testar acesso: {e}")

def menu_principal():
    """Menu principal do utilit√°rio"""
    while True:
        print("\n" + "="*50)
        print("  GERENCIADOR DE ACESSO AO E-COMMERCE")
        print("="*50)
        print("1. Listar todos os usu√°rios com status")
        print("2. Bloquear acesso de um usu√°rio")
        print("3. Conceder acesso a um usu√°rio")
        print("4. Testar acesso de um usu√°rio")
        print("5. Listar apenas usu√°rios bloqueados")
        print("0. Sair")
        print("-"*50)
        
        try:
            opcao = input("Escolha uma op√ß√£o: ").strip()
            
            if opcao == '1':
                listar_todos_usuarios_com_status()
            elif opcao == '2':
                bloquear_usuario()
            elif opcao == '3':
                conceder_acesso()
            elif opcao == '4':
                testar_acesso()
            elif opcao == '5':
                usuarios_bloqueados = listar_usuarios_sem_acesso_ecommerce()
                if usuarios_bloqueados:
                    print("\n=== USU√ÅRIOS BLOQUEADOS ===")
                    for usuario in usuarios_bloqueados:
                        print(f"ID: {usuario[0]}, Nome: {usuario[1]}, Empresa: {usuario[2]}")
                else:
                    print("‚úÖ Nenhum usu√°rio est√° bloqueado no momento")
            elif opcao == '0':
                print("üëã Saindo...")
                break
            else:
                print("‚ùå Op√ß√£o inv√°lida!")
                
        except KeyboardInterrupt:
            print("\nüëã Saindo...")
            break
        except Exception as e:
            print(f"‚ùå Erro: {e}")

if __name__ == "__main__":
    print("üîê Utilit√°rio de Gerenciamento de Acesso ao E-commerce")
    print("‚ö†Ô∏è  Execute este script apenas se voc√™ tem acesso administrativo ao banco de dados")
    
    try:
        # Verificar se consegue conectar ao banco
        usuarios = listar_usuarios()
        if not usuarios:
            print("‚ö†Ô∏è  Nenhum usu√°rio encontrado ou erro na conex√£o com o banco")
        
        menu_principal()
        
    except Exception as e:
        print(f"‚ùå Erro fatal: {e}")
        print("üí° Certifique-se de que:")
        print("   - O banco de dados est√° acess√≠vel")
        print("   - Voc√™ tem permiss√µes adequadas")
        print("   - As tabelas do sistema foram criadas")
        sys.exit(1)