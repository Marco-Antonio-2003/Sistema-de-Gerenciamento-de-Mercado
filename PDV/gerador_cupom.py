import os
import sys
import datetime
import subprocess
import platform
import time

# Importar fun√ß√µes do banco de dados
from base.banco import execute_query

def verificar_e_instalar_escpos():
    """Verifica se python-escpos est√° instalado e tenta instalar se n√£o estiver"""
    try:
        from escpos.printer import Usb, Serial, Network, Win32Raw
        return True
    except ImportError:
        print("M√≥dulo python-escpos n√£o encontrado. Tentando instalar...")
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "install", "python-escpos"])
            print("python-escpos instalado com sucesso!")
            print("IMPORTANTE: Reinicie o programa para que as altera√ß√µes tenham efeito.")
            return False
        except Exception as e:
            print(f"Erro ao instalar python-escpos: {e}")
            print("Instale manualmente com: pip install python-escpos")
            return False


def obter_impressora_pdv():
    """
    Busca a impressora configurada como 'PDV' no banco.
    Aceita qualquer categoria que contenha 'PDV' (case-insensitive).
    Se n√£o encontrar, faz fallback para a impressora t√©rmica da esta√ß√£o.
    Returns:
        str | None: Nome da impressora ou None se n√£o houver.
    """
    try:
        print("=== DEBUG: Iniciando busca de impressora PDV ===")
        
        # Primeiro, listar todas as configura√ß√µes para debug
        try:
            print("Listando todas as configura√ß√µes de impressoras:")
            todas_configs = execute_query("SELECT ID, CATEGORIA, IMPRESSORA, ESTACAO FROM CONFIGURACAO_IMPRESSORAS")
            if todas_configs:
                for config in todas_configs:
                    print(f"  ID: {config[0]}, Categoria: '{config[1]}', Impressora: '{config[2]}', Esta√ß√£o: '{config[3]}'")
            else:
                print("  Nenhuma configura√ß√£o encontrada na tabela")
        except Exception as e:
            print(f"Erro ao listar configura√ß√µes: {e}")
        
        # Busca espec√≠fica por "PDV" exato
        print("\n1. Buscando por categoria exata 'PDV'...")
        try:
            result = execute_query("SELECT IMPRESSORA FROM CONFIGURACAO_IMPRESSORAS WHERE CATEGORIA = 'PDV'")
            print(f"Resultado busca exata 'PDV': {result}")
            if result and len(result) > 0 and result[0][0]:
                nome = result[0][0].strip()
                print(f"‚úÖ Impressora PDV encontrada (busca exata): {nome}")
                return nome
        except Exception as e:
            print(f"Erro na busca exata: {e}")
        
        # Busca por "Impressora para o PDV" (baseado na sua imagem)
        print("\n2. Buscando por categoria 'Impressora para o PDV'...")
        try:
            result = execute_query("SELECT IMPRESSORA FROM CONFIGURACAO_IMPRESSORAS WHERE CATEGORIA = 'Impressora para o PDV'")
            print(f"Resultado busca 'Impressora para o PDV': {result}")
            if result and len(result) > 0 and result[0][0]:
                nome = result[0][0].strip()
                print(f"‚úÖ Impressora PDV encontrada (busca espec√≠fica): {nome}")
                return nome
        except Exception as e:
            print(f"Erro na busca espec√≠fica: {e}")
        
        # Busca com LIKE para qualquer categoria que contenha PDV
        print("\n3. Buscando com LIKE %PDV%...")
        try:
            result = execute_query("SELECT IMPRESSORA, CATEGORIA FROM CONFIGURACAO_IMPRESSORAS WHERE UPPER(CATEGORIA) LIKE '%PDV%'")
            print(f"Resultado busca LIKE '%PDV%': {result}")
            if result and len(result) > 0 and result[0][0]:
                nome = result[0][0].strip()
                categoria = result[0][1] if len(result[0]) > 1 else "N/A"
                print(f"‚úÖ Impressora PDV encontrada (busca LIKE): {nome} - Categoria: {categoria}")
                return nome
        except Exception as e:
            print(f"Erro na busca LIKE: {e}")
        
        # Busca mais ampla por qualquer impressora
        print("\n4. Buscando qualquer impressora...")
        try:
            result = execute_query("SELECT IMPRESSORA, CATEGORIA FROM CONFIGURACAO_IMPRESSORAS ORDER BY ID DESC")
            print(f"Resultado busca geral: {result}")
            if result and len(result) > 0:
                for row in result:
                    if row[0] and row[0].strip():
                        nome = row[0].strip()
                        categoria = row[1] if row[1] else "N/A"
                        print(f"‚úÖ Impressora encontrada (busca geral): {nome} - Categoria: {categoria}")
                        return nome
        except Exception as e:
            print(f"Erro na busca geral: {e}")

        # Fallback para impressora t√©rmica da esta√ß√£o
        print("\n5. Tentando fallback para CONFIG_ESTACAO...")
        try:
            result_fb = execute_query("SELECT IMPRESSORA_TERMICA FROM CONFIG_ESTACAO WHERE ATIVO = 1 ORDER BY ID DESC")
            print(f"Resultado fallback CONFIG_ESTACAO: {result_fb}")
            if result_fb and len(result_fb) > 0 and result_fb[0][0]:
                nome = result_fb[0][0].strip()
                print(f"‚úÖ Impressora t√©rmica encontrada (fallback): {nome}")
                return nome
        except Exception as e:
            print(f"Erro no fallback: {e}")

        print("‚ùå Nenhuma impressora configurada encontrada")
        return None

    except Exception as e:
        print(f"‚ùå Erro geral ao buscar impressora PDV: {e}")
        import traceback
        traceback.print_exc()
        return None

def conectar_impressora(nome_impressora):
    """
    Conecta com a impressora t√©rmica usando diferentes m√©todos
    Args:
        nome_impressora (str): Nome da impressora
    Returns:
        object | None: Objeto da impressora conectada ou None
    """
    try:
        from escpos.printer import Win32Raw, Usb, Serial, Network
        
        print(f"Tentando conectar com a impressora: {nome_impressora}")
        
        # Tentativa Win32Raw no Windows (m√©todo mais comum para impressoras instaladas)
        if platform.system() == "Windows":
            try:
                print(f"Tentando Win32Raw com: {nome_impressora}")
                printer = Win32Raw(nome_impressora)
                
                # Teste b√°sico de conex√£o
                printer._raw(b'\x1B\x40')  # ESC @ - Reset
                print(f"‚úÖ Conectado via Win32Raw: {nome_impressora}")
                return printer
            except Exception as e:
                print(f"‚ùå Erro Win32Raw: {e}")
        
        # Se o nome cont√©m informa√ß√µes sobre USB, tenta extrair vendor ID
        if "ELGIN" in nome_impressora.upper() or "i9" in nome_impressora.upper():
            # IDs comuns da Elgin
            vendor_ids = [0x20d1, 0x0483, 0x0519]
            for vid in vendor_ids:
                try:
                    printer = Usb(vid, 0x0001)
                    printer._raw(b'\x1B\x40')  # Teste de conex√£o
                    print(f"‚úÖ Conectado via USB Elgin (vendor:{hex(vid)})")
                    return printer
                except:
                    try:
                        printer = Usb(vid, 0x0002)
                        printer._raw(b'\x1B\x40')  # Teste de conex√£o
                        print(f"‚úÖ Conectado via USB Elgin (vendor:{hex(vid)}, product:0x0002)")
                        return printer
                    except:
                        continue
        
        # Tentativa USB gen√©rica
        vendor_ids = [0x20d1, 0x0dd4, 0x0519, 0x0483]
        for vid in vendor_ids:
            try:
                printer = Usb(vid, 0x0001)
                printer._raw(b'\x1B\x40')  # Teste de conex√£o
                print(f"‚úÖ Conectado via USB (vendor:{hex(vid)})")
                return printer
            except:
                try:
                    printer = Usb(vid, 0x0002)
                    printer._raw(b'\x1B\x40')  # Teste de conex√£o
                    print(f"‚úÖ Conectado via USB (vendor:{hex(vid)}, product:0x0002)")
                    return printer
                except:
                    continue
        
        # Tentativa Serial
        portas_serial = ['COM1','COM2','COM3','COM4','COM5','COM6','/dev/ttyUSB0','/dev/ttyS0']
        for porta in portas_serial:
            try:
                if os.path.exists(porta) or porta.startswith('COM'):
                    printer = Serial(porta, baudrate=9600)
                    printer._raw(b'\x1B\x40')  # Teste de conex√£o
                    print(f"‚úÖ Conectado via Serial: {porta}")
                    return printer
            except:
                continue
        
        # Tentativa Network
        ips_rede = ['192.168.1.100','192.168.0.100','10.0.0.100','127.0.0.1']
        for ip in ips_rede:
            try:
                printer = Network(ip, port=9100)
                printer._raw(b'\x1B\x40')  # Teste de conex√£o
                print(f"‚úÖ Conectado via Network: {ip}")
                return printer
            except:
                continue
        
        print("‚ùå N√£o foi poss√≠vel conectar com a impressora pelos m√©todos dispon√≠veis")
        return None
        
    except ImportError:
        print("‚ùå Biblioteca python-escpos n√£o est√° instalada")
        return None
    except Exception as e:
        print(f"‚ùå Erro geral ao conectar: {e}")
        import traceback
        traceback.print_exc()
        return None

def gerar_cupom_escpos_seguro(printer, id_venda, tipo_cupom, cpf, data_venda, itens, total, 
                             forma_pagamento, nome_empresa="MB SISTEMA", 
                             cnpj="00.000.000/0001-00"):
    """
    Vers√£o mais segura da fun√ß√£o de impress√£o com tratamento robusto de erros e com
    **todos** os textos centralizados via ESC a 1.
    """
    try:
        print("üñ®Ô∏è [PASSO 1] Iniciando impress√£o do cupom...")
        # Reset e selecionar alinhamento central para todo o cupom
        printer._raw(b'\x1B\x40')  # ESC @ - Reset
        time.sleep(0.2)
        printer._raw(b'\x1B\x61\x01')  # ESC a 1 - Center

        # ---------- CABE√áALHO ----------
        print("üìù [PASSO 2] Imprimindo cabe√ßalho...")
        printer.text("\n")
        printer.text(f"{nome_empresa}\n")
        printer.text(f"CNPJ: {cnpj}\n")
        printer.text("VILA SANTANA\n")
        printer.text("EMILIO FERRARI, 110\n")
        printer.text("ITAPEVA - SP\n\n")
        printer.text(f"CUPOM {tipo_cupom.replace('_', ' ')}\n")
        if tipo_cupom == "NAO_FISCAL":
            printer.text("Nao permite aproveitamento\n")
            printer.text("de credito de ICMS\n")
        printer.text("\n" + "=" * 32 + "\n")
        print("‚úÖ [PASSO 2] Cabe√ßalho OK")

        # ---------- INFORMA√á√ïES DA VENDA ----------
        print("üìù [PASSO 3] Imprimindo informa√ß√µes da venda...")
        printer.text(f"Venda #{id_venda}\n")
        printer.text(f"Data: {data_venda.strftime('%d/%m/%Y %H:%M:%S')}\n")
        if cpf and cpf.strip():
            printer.text(f"CPF: {cpf}\n")
        else:
            printer.text("CONSUMIDOR NAO IDENTIFICADO\n")
        printer.text(f"Pagamento: {forma_pagamento}\n")
        printer.text("\n" + "-" * 32 + "\n")
        print("‚úÖ [PASSO 3] Informa√ß√µes da venda OK")

        # ---------- ITENS ----------
        print("üìù [PASSO 4] Imprimindo itens...")
        printer.text("ITEM  QTD  VALOR    TOTAL\n")
        printer.text("-" * 32 + "\n")
        for i, item in enumerate(itens, 1):
            nome_produto = str(item['produto'])[:20]
            quantidade = float(item['quantidade'])
            valor_unitario = float(item['valor_unitario'])
            valor_total_item = quantidade * valor_unitario
            printer.text(f"{i:02d} - {nome_produto}\n")
            linha_valores = f"{quantidade:3.0f} x {valor_unitario:6.2f} = {valor_total_item:6.2f}\n"
            printer.text(linha_valores.replace('.', ','))
            printer.text("-" * 32 + "\n")
            print(f"‚úÖ [PASSO 4.{i}] Item {nome_produto} OK")
        print("‚úÖ [PASSO 4] Todos os itens OK")

        # ---------- TOTAIS ----------
        print("üìù [PASSO 5] Imprimindo totais...")
        total_float = float(total)
        printer.text(f"Subtotal: R$ {total_float:6.2f}\n".replace('.', ','))
        printer.text(f"Desconto: R$   0,00\n")
        printer.text(f"Acrescimo: R$   0,00\n")
        printer.text("=" * 32 + "\n")
        printer.text(f"TOTAL: R$ {total_float:6.2f}\n".replace('.', ','))
        printer.text("=" * 32 + "\n")
        print("‚úÖ [PASSO 5] Totais OK")

        # ---------- RODAP√â ----------
        print("üìù [PASSO 6] Imprimindo rodap√©...")
        if tipo_cupom == "NAO_FISCAL":
            printer.text("SEM VALOR FISCAL\n")
            printer.text("Documento emitido em ambiente\n")
            printer.text("de homologacao\n\n")
        printer.text("Agradecemos a preferencia!\n")
        printer.text(f"{nome_empresa}\n")
        printer.text(f"{data_venda.strftime('%d/%m/%Y')}\n\n")
        print("‚úÖ [PASSO 6] Rodap√© OK")

        # ---------- FINALIZA√á√ÉO ----------
        print("‚úÇÔ∏è [PASSO 7] Finalizando impress√£o...")
        try:
            printer.cut()
            print("‚úÖ [PASSO 7.1] Papel cortado")
        except:
            printer.text("\n" * 4)
            print("‚ö†Ô∏è [PASSO 7.1] Corte n√£o suportado, alimentando papel")
        print("‚úÖ [PASSO 7] Finaliza√ß√£o OK")

        print("üéâ Cupom impresso com sucesso!")
        return True

    except Exception as e:
        print(f"‚ùå ERRO CR√çTICO na impress√£o: {e}")
        import traceback; traceback.print_exc()
        return False



def gerar_cupom_escpos(printer, id_venda, tipo_cupom, cpf, data_venda, itens, total, 
                      forma_pagamento, nome_empresa="MB SISTEMA", 
                      cnpj="00.000.000/0001-00"):
    """
    Fun√ß√£o principal que chama a vers√£o segura
    """
    return gerar_cupom_escpos_seguro(printer, id_venda, tipo_cupom, cpf, data_venda, itens, total, 
                                   forma_pagamento, nome_empresa, cnpj)

def gerar_e_imprimir_cupom(id_venda, tipo_cupom, cpf, data_venda, itens, total, forma_pagamento, 
                          nome_empresa="MB SISTEMA", cnpj="00.000.000/0001-00", 
                          imprimir_automaticamente=True):
    """
    Gera e imprime cupom diretamente na impressora t√©rmica usando ESC/POS
    
    Args:
        id_venda: ID da venda
        tipo_cupom: Tipo de cupom (FISCAL, NAO_FISCAL, CONTA_CREDITO)
        cpf: CPF do cliente (pode ser vazio)
        data_venda: Data da venda no formato datetime
        itens: Lista de dicion√°rios com os itens da venda
        total: Valor total da venda
        forma_pagamento: Forma de pagamento utilizada
        nome_empresa: Nome da empresa
        cnpj: CNPJ da empresa
        imprimir_automaticamente: Se True, imprime automaticamente
        
    Returns:
        dict: Dicion√°rio com informa√ß√µes sobre o resultado
    """
    resultado = {
        'sucesso': False,
        'impressao_sucesso': False,
        'mensagem': '',
        'impressora_utilizada': None,
        'erro_detalhado': None
    }
    
    try:
        print("\n" + "="*60)
        print("üñ®Ô∏è INICIANDO PROCESSO DE IMPRESS√ÉO DE CUPOM")
        print("="*60)
        
        if not imprimir_automaticamente:
            resultado['sucesso'] = True
            resultado['mensagem'] = 'Cupom n√£o foi configurado para impress√£o autom√°tica'
            return resultado
        
        # Validar dados de entrada
        print("üîç Validando dados de entrada...")
        if not id_venda:
            resultado['mensagem'] = 'ID da venda n√£o informado'
            return resultado
            
        if not itens or len(itens) == 0:
            resultado['mensagem'] = 'Nenhum item informado para impress√£o'
            return resultado
            
        if not isinstance(data_venda, datetime.datetime):
            resultado['mensagem'] = 'Data da venda deve ser um objeto datetime'
            return resultado
        
        print(f"‚úÖ Dados validados - Venda #{id_venda}, {len(itens)} itens, Total: R$ {total}")
        
        # Buscar a impressora PDV configurada
        print("\nüîç Buscando impressora configurada...")
        impressora_pdv = obter_impressora_pdv()
        
        if not impressora_pdv:
            resultado['mensagem'] = 'Nenhuma impressora PDV configurada no banco de dados'
            resultado['erro_detalhado'] = 'Verifique a tabela CONFIGURACAO_IMPRESSORAS'
            print(f"‚ùå {resultado['mensagem']}")
            return resultado
        
        print(f"‚úÖ Impressora encontrada: {impressora_pdv}")
        
        # Conectar com a impressora
        print("\nüîå Conectando com a impressora...")
        printer = conectar_impressora(impressora_pdv)
        
        if not printer:
            resultado['mensagem'] = f'N√£o foi poss√≠vel conectar com a impressora: {impressora_pdv}'
            resultado['erro_detalhado'] = 'Verifique se a impressora est√° ligada e os drivers instalados'
            print(f"‚ùå {resultado['mensagem']}")
            return resultado
        
        print("‚úÖ Impressora conectada com sucesso!")
        
        # Gerar e imprimir o cupom
        print("\nüìÑ Gerando cupom...")
        impressao_ok = gerar_cupom_escpos(
            printer, id_venda, tipo_cupom, cpf, data_venda, itens, 
            total, forma_pagamento, nome_empresa, cnpj
        )
        
        if impressao_ok:
            resultado['sucesso'] = True
            resultado['impressao_sucesso'] = True
            resultado['impressora_utilizada'] = impressora_pdv
            resultado['mensagem'] = f'Cupom impresso com sucesso em {impressora_pdv}'
            print(f"\nüéâ {resultado['mensagem']}")
        else:
            resultado['mensagem'] = 'Falha ao gerar/imprimir o conte√∫do do cupom'
            resultado['erro_detalhado'] = 'Erro durante a gera√ß√£o do cupom ESC/POS'
            print(f"‚ùå {resultado['mensagem']}")
        
        # Fechar conex√£o
        print("\nüîå Fechando conex√£o com a impressora...")
        try:
            printer.close()
            print("‚úÖ Conex√£o fechada")
        except Exception as e:
            print(f"‚ö†Ô∏è Aviso ao fechar conex√£o: {e}")
        
        return resultado
        
    except Exception as e:
        resultado['mensagem'] = f'Erro cr√≠tico ao gerar/imprimir cupom: {str(e)}'
        resultado['erro_detalhado'] = str(e)
        print(f"‚ùå ERRO CR√çTICO em gerar_e_imprimir_cupom: {e}")
        import traceback
        traceback.print_exc()
        return resultado

def teste_impressora_basico():
    """Teste mais b√°sico poss√≠vel para isolar problemas"""
    print("\n" + "="*50)
    print("üî¨ TESTE ULTRA B√ÅSICO DE IMPRESSORA")
    print("="*50)
    
    try:
        # Buscar impressora
        print("1Ô∏è‚É£ Buscando impressora...")
        impressora_pdv = obter_impressora_pdv()
        if not impressora_pdv:
            print("‚ùå Nenhuma impressora encontrada")
            return False
        print(f"‚úÖ Impressora: {impressora_pdv}")
        
        # Conectar
        print("2Ô∏è‚É£ Conectando...")
        printer = conectar_impressora(impressora_pdv)
        if not printer:
            print("‚ùå Falha na conex√£o")
            return False
        print("‚úÖ Conectado")
        
        # Teste super simples
        print("3Ô∏è‚É£ Teste de impress√£o m√≠nima...")
        try:
            printer.text("\n")
            printer.text("\n")
            printer.text("\n\n")
            print("‚úÖ Impress√£o b√°sica OK")
        except Exception as e:
            print(f"‚ùå Erro na impress√£o b√°sica: {e}")
            return False
        
        # Fechar
        print("4Ô∏è‚É£ Fechando conex√£o...")
        try:
            printer.close()
            print("‚úÖ Conex√£o fechada")
        except:
            pass
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste b√°sico: {e}")
        import traceback
        traceback.print_exc()
        return False

def teste_impressora():
    """Fun√ß√£o para testar a conectividade com a impressora"""
    print("\n" + "="*50)
    print("üß™ TESTE DE IMPRESSORA T√âRMICA")
    print("="*50)
    
    # Verificar se a biblioteca est√° instalada
    print("1Ô∏è‚É£ Verificando biblioteca python-escpos...")
    if not verificar_e_instalar_escpos():
        print("‚ùå Biblioteca n√£o instalada. Execute novamente ap√≥s reiniciar.")
        return False
    print("‚úÖ Biblioteca instalada")
    
    # Teste ultra b√°sico primeiro
    print("\nüî¨ Executando teste ultra b√°sico...")
    if not teste_impressora_basico():
        print("‚ùå Falha no teste b√°sico")
        return False
    
    # Buscar impressora configurada
    print("\n2Ô∏è‚É£ Buscando impressora configurada...")
    impressora_pdv = obter_impressora_pdv()
    
    if not impressora_pdv:
        print("‚ùå Nenhuma impressora configurada no banco de dados")
        return False
    
    print(f"‚úÖ Impressora configurada: {impressora_pdv}")
    
    # Tentar conectar
    print("\n3Ô∏è‚É£ Testando conex√£o...")
    printer = conectar_impressora(impressora_pdv)
    
    if not printer:
        print("‚ùå N√£o foi poss√≠vel conectar com a impressora")
        return False
    
    print("‚úÖ Impressora conectada com sucesso!")
    
    # Fazer teste b√°sico de impress√£o
    print("\n4Ô∏è‚É£ Executando teste de impress√£o...")
    try:
        printer.set(align='center', text_type='B')
        printer.text("=== TESTE DE IMPRESSAO ===\n")
        printer.set(text_type='normal')
        printer.text(f"Data: {datetime.datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n")
        printer.text("Impressora funcionando!\n")
        printer.text("Conexao: OK\n")
        printer.text("Comunicacao: OK\n")
        printer.text("=" * 30 + "\n")
        
        try:
            printer.cut()
        except:
            printer.text("\n\n")
        
        print("‚úÖ Teste de impress√£o realizado com sucesso!")
        
        # Fechar conex√£o
        printer.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste de impress√£o: {e}")
        import traceback
        traceback.print_exc()
        return False

# Fun√ß√£o adicional para debug detalhado
def debug_sistema_impressao():
    """Fun√ß√£o para debug completo do sistema de impress√£o"""
    print("\n" + "="*60)
    print("üîß DEBUG COMPLETO DO SISTEMA DE IMPRESS√ÉO")
    print("="*60)
    
    print(f"üñ•Ô∏è Sistema Operacional: {platform.system()} {platform.release()}")
    print(f"üêç Python: {sys.version}")
    
    # Verificar biblioteca
    print("\nüìö Verificando bibliotecas...")
    try:
        import escpos
        print(f"‚úÖ python-escpos vers√£o: {escpos.__version__}")
    except ImportError:
        print("‚ùå python-escpos n√£o instalada")
    except AttributeError:
        print("‚úÖ python-escpos instalada (vers√£o n√£o detectada)")
    
    # Verificar banco de dados
    print("\nüóÑÔ∏è Verificando configura√ß√µes no banco...")
    try:
        configs = execute_query("SELECT * FROM CONFIGURACAO_IMPRESSORAS")
        if configs:
            print(f"‚úÖ Encontradas {len(configs)} configura√ß√µes de impressora")
            for config in configs:
                print(f"   - {config}")
        else:
            print("‚ùå Nenhuma configura√ß√£o encontrada")
    except Exception as e:
        print(f"‚ùå Erro ao acessar banco: {e}")
    
    # Tentar conex√µes
    print("\nüîå Testando m√©todos de conex√£o...")
    impressora = obter_impressora_pdv()
    if impressora:
        conectar_impressora(impressora)

# Exemplo de uso
if __name__ == "__main__":
    print("üñ®Ô∏è SISTEMA DE IMPRESS√ÉO T√âRMICA ESC/POS")
    print("="*50)
    
    # Debug completo se solicitado
    if len(sys.argv) > 1 and sys.argv[1] == "--debug":
        debug_sistema_impressao()
        sys.exit(0)
    
    # Verificar se python-escpos est√° instalado
    print("1Ô∏è‚É£ Verificando depend√™ncias...")
    if not verificar_e_instalar_escpos():
        print("‚ùå Por favor, reinicie o programa ap√≥s a instala√ß√£o da biblioteca")
        sys.exit(1)
    
    # Fazer teste da impressora
    print("\n2Ô∏è‚É£ Testando impressora...")
    if not teste_impressora():
        print("\n‚ùå FALHA NO TESTE DA IMPRESSORA")
        print("üìã Verifique:")
        print("   ‚Ä¢ Impressora est√° ligada e conectada")
        print("   ‚Ä¢ Drivers est√£o instalados corretamente")
        print("   ‚Ä¢ Configura√ß√£o est√° correta no banco de dados")
        print("   ‚Ä¢ Papel est√° carregado")
        print("\nüí° Execute com --debug para mais informa√ß√µes:")
        print("   python seu_script.py --debug")
        sys.exit(1)
    
    print("\n3Ô∏è‚É£ Gerando cupom de exemplo...")
    
    # Dados de exemplo para teste
    itens_exemplo = [
        {'produto': 'Herbissimo', 'quantidade': 1, 'valor_unitario': 7.00},
        {'produto': 'Cafe Premium', 'quantidade': 2, 'valor_unitario': 15.50},
        {'produto': 'Acucar Cristal', 'quantidade': 1, 'valor_unitario': 4.20}
    ]
    
    total_exemplo = sum(item['quantidade'] * item['valor_unitario'] for item in itens_exemplo)
    
    # Chamar a fun√ß√£o para gerar e imprimir automaticamente
    resultado = gerar_e_imprimir_cupom(
        id_venda=37,
        tipo_cupom="NAO_FISCAL",
        cpf="",  # Consumidor n√£o identificado
        data_venda=datetime.datetime.now(),
        itens=itens_exemplo,
        total=total_exemplo,
        forma_pagamento="01 - Dinheiro",
        nome_empresa="MB SISTEMA",
        cnpj="00.000.000/0001-00",
        imprimir_automaticamente=True
    )
    
    print(f"\n" + "="*50)
    print("üìä RESULTADO DA OPERA√á√ÉO")
    print("="*50)
    print(f"‚úÖ Sucesso Geral: {resultado['sucesso']}")
    print(f"üñ®Ô∏è Impress√£o: {resultado['impressao_sucesso']}")
    print(f"üìÑ Impressora: {resultado['impressora_utilizada']}")
    print(f"üí¨ Mensagem: {resultado['mensagem']}")
    if resultado.get('erro_detalhado'):
        print(f"üîç Erro Detalhado: {resultado['erro_detalhado']}")
    
    if resultado['impressao_sucesso']:
        print("\nüéâ CUPOM IMPRESSO COM SUCESSO!")
    else:
        print(f"\n‚ùå FALHA NA IMPRESS√ÉO")
        print(f"üí¨ {resultado['mensagem']}")
        if resultado.get('erro_detalhado'):
            print(f"üîç {resultado['erro_detalhado']}")
        print("\nüí° Dicas para solu√ß√£o:")   
        print("   ‚Ä¢ Verifique se a impressora est√° ligada")
        print("   ‚Ä¢ Confirme se h√° papel na impressora")
        print("   ‚Ä¢ Teste a impressora no Windows")
        print("   ‚Ä¢ Execute com --debug para mais detalhes")