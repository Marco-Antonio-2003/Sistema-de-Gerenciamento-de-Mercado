#principal.py
import sys
import os
import importlib.util
import unicodedata
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                             QHBoxLayout, QPushButton, QLabel, QFrame, QAction,
                             QMenu, QToolBar, QGraphicsDropShadowEffect, QMessageBox, QDialog)
from PyQt5.QtGui import QFont, QCursor, QIcon, QPixmap, QColor
from PyQt5.QtCore import Qt, QSize, QPropertyAnimation, QEasingCurve, QUrl, QTimer, QRect
from PyQt5.QtGui import QDesktopServices
from assistente import adicionar_assistente_ao_sistema


class ContatosWhatsAppDialog(QDialog):
    """Janela de contatos do WhatsApp com design melhorado"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.contatos = [
            {
                "nome": "Marcos Barros",
                "funcao": "Suporte",
                "telefone": "15 99102-3337",
                "numero_limpo": "5515991023337"
            },
            {
                "nome": "Marco Ant√¥nio",
                "funcao": "Programador",
                "telefone": "15 99612-5218",
                "numero_limpo": "5515996125218"
            }
        ]
        self.init_ui()
    
    def init_ui(self):
        """Inicializa a interface da janela de contatos"""
        self.setWindowTitle("Contatos - WhatsApp")
        self.setWindowIcon(QIcon(os.path.join(os.path.dirname(os.path.abspath(__file__)), "ico-img", "whatsapp2.png")))
        # Aumentar largura para acomodar conte√∫do
        self.setFixedSize(600, 350)
        
        # Remover bot√µes de minimizar/maximizar e '?' do t√≠tulo
        self.setWindowFlags(Qt.Dialog | Qt.WindowTitleHint | Qt.WindowCloseButtonHint)
        
        # Estilo geral da janela
        self.setStyleSheet("""
            QDialog {
                background-color: #f5f5f5;
                border: 1px solid #ddd;
            }
        """)
        
        # Layout principal
        layout = QVBoxLayout(self)
        layout.setSpacing(0)
        layout.setContentsMargins(0, 0, 0, 0)
        
        # Header com gradiente
        header_widget = QWidget()
        header_widget.setFixedHeight(70)
        header_widget.setStyleSheet("""
            QWidget {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #25D366, stop:1 #128C7E);
                border-bottom: 2px solid #0d6e5a;
            }
        """)
        
        header_layout = QHBoxLayout(header_widget)
        header_layout.setContentsMargins(20, 0, 20, 0)
        
        # √çcone do WhatsApp no header
        icon_label = QLabel()
        whatsapp_icon_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "ico-img", "whatsapp2.png")
        if os.path.exists(whatsapp_icon_path):
            pixmap = QPixmap(whatsapp_icon_path)
            icon_label.setPixmap(pixmap.scaled(40, 40, Qt.KeepAspectRatio, Qt.SmoothTransformation))
        else:
            icon_label.setText("üí¨")
            icon_label.setFont(QFont("Arial", 28))
        icon_label.setStyleSheet("background: transparent;")
        
        # T√≠tulo no header
        titulo = QLabel("Contatos WhatsApp")
        titulo.setFont(QFont("Arial", 20, QFont.Bold))
        titulo.setStyleSheet("""
            color: white;
            background: transparent;
            padding-left: 10px;
        """)
        
        header_layout.addWidget(icon_label)
        header_layout.addWidget(titulo)
        header_layout.addStretch()
        
        layout.addWidget(header_widget)
        
        # Container principal com padding
        main_container = QWidget()
        main_container.setStyleSheet("background-color: #f5f5f5;")
        main_layout = QVBoxLayout(main_container)
        main_layout.setContentsMargins(20, 20, 20, 20)
        main_layout.setSpacing(15)
        
        # Criar cards para cada contato
        for contato in self.contatos:
            self.criar_card_contato(main_layout, contato)
        
        # Espa√ßador
        main_layout.addStretch()
        
        # Adicionar o container principal ao layout
        layout.addWidget(main_container)
    
    def criar_card_contato(self, layout, contato):
        """Cria um card estilizado para um contato"""
        # Card principal
        card = QFrame()
        card.setMinimumHeight(95)
        card.setMaximumHeight(95)
        card.setStyleSheet("""
            QFrame {
                background-color: white;
                border: 1px solid #e0e0e0;
                border-radius: 12px;
            }
            QFrame:hover {
                border: 2px solid #25D366;
                background-color: #f0fff4;
            }
        """)
        
        # Adicionar sombra ao card
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(8)
        shadow.setColor(QColor(0, 0, 0, 30))
        shadow.setOffset(0, 2)
        card.setGraphicsEffect(shadow)
        
        # Layout do card
        card_layout = QHBoxLayout(card)
        card_layout.setContentsMargins(15, 10, 15, 10)
        card_layout.setSpacing(15)
        
        # Avatar/Inicial do contato
        avatar = QLabel()
        avatar.setFixedSize(50, 50)
        inicial = contato["nome"].split()[0][0].upper()
        avatar.setText(inicial)
        avatar.setAlignment(Qt.AlignCenter)
        avatar.setStyleSheet("""
            QLabel {
                background-color: #25D366;
                color: white;
                border-radius: 25px;
                font-size: 20px;
                font-weight: bold;
            }
        """)
        
        # Informa√ß√µes do contato
        info_widget = QWidget()
        info_widget.setStyleSheet("background: transparent;")
        info_widget.setFixedWidth(300)  # Largura fixa para garantir espa√ßo
        info_layout = QVBoxLayout(info_widget)
        info_layout.setContentsMargins(0, 5, 0, 5)
        info_layout.setSpacing(3)
        
        # Nome
        nome_label = QLabel(contato["nome"])
        nome_label.setFont(QFont("Arial", 14, QFont.Bold))
        nome_label.setStyleSheet("color: #2c3e50; background: transparent;")
        nome_label.setWordWrap(False)  # Evitar quebra de linha
        nome_label.setMinimumWidth(200)  # Garantir largura m√≠nima
        
        # Fun√ß√£o
        funcao_label = QLabel(contato["funcao"])
        funcao_label.setFont(QFont("Arial", 11))
        funcao_label.setStyleSheet("color: #7f8c8d; background: transparent;")
        funcao_label.setWordWrap(False)
        
        # Telefone com √≠cone
        telefone_label = QLabel(f"üì± {contato['telefone']}")
        telefone_label.setFont(QFont("Arial", 10))
        telefone_label.setStyleSheet("color: #34495e; background: transparent;")
        telefone_label.setWordWrap(False)
        
        info_layout.addWidget(nome_label)
        info_layout.addWidget(funcao_label)
        info_layout.addWidget(telefone_label)
        
        # Bot√£o WhatsApp
        btn_whatsapp = QPushButton("WhatsApp")
        btn_whatsapp.setFixedSize(120, 40)
        btn_whatsapp.setStyleSheet("""
            QPushButton {
                background-color: #25D366;
                color: white;
                border: none;
                border-radius: 20px;
                font-weight: bold;
                font-size: 13px;
                padding: 8px 12px;
            }
            QPushButton:hover {
                background-color: #128C7E;
            }
            QPushButton:pressed {
                background-color: #0d6e5a;
            }
        """)
        btn_whatsapp.setCursor(QCursor(Qt.PointingHandCursor))
        btn_whatsapp.clicked.connect(lambda: self.abrir_whatsapp(contato["numero_limpo"]))
        
        # Adicionar √≠cone ao bot√£o
        whatsapp_icon_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "ico-img", "whatsapp2.png")
        if os.path.exists(whatsapp_icon_path):
            btn_whatsapp.setIcon(QIcon(whatsapp_icon_path))
            btn_whatsapp.setIconSize(QSize(18, 18))
        
        # Montar o layout do card
        card_layout.addWidget(avatar)
        card_layout.addWidget(info_widget)
        card_layout.addStretch()  # Adicionar espa√ßo flex√≠vel
        card_layout.addWidget(btn_whatsapp)
        
        # Tornar o card clic√°vel
        card.mousePressEvent = lambda event: self.abrir_whatsapp(contato["numero_limpo"])
        card.setCursor(QCursor(Qt.PointingHandCursor))
        
        layout.addWidget(card)
    
    def abrir_whatsapp(self, numero):
        """Abre o WhatsApp com o n√∫mero especificado"""
        try:
            url = QUrl(f"https://wa.me/{numero}")
            
            # Abrir URL
            resultado = QDesktopServices.openUrl(url)
            
            if resultado:
                print(f"WhatsApp aberto para o n√∫mero: {numero}")
                self.close()
            else:
                print("Falha ao abrir a URL do WhatsApp.")
                import webbrowser
                webbrowser.open(f"https://wa.me/{numero}")
                self.close()
                
        except Exception as e:
            print(f"Erro ao abrir WhatsApp: {e}")
            QMessageBox.warning(self, "Erro", f"Erro ao abrir WhatsApp: {str(e)}")


class MenuButton(QPushButton):
    def __init__(self, text, parent=None):
        super().__init__(text, parent)
        self.setFixedHeight(50)
        self.setCursor(QCursor(Qt.PointingHandCursor))
        self.setStyleSheet("""
            QPushButton {
                background-color: #005079; 
                color: white; 
                border: none; 
                font-size: 14px; 
                font-weight: bold;
                padding: 10px;
            }
            QPushButton:hover {
                background-color: #003d5c;
            }
            QPushButton:pressed {
                background-color: #00283d;
            }
        """)
        
        self.menu = QMenu(self)
        self.menu.setStyleSheet("""
            QMenu {
                background-color: #ffffff;
                color: black;
                border: 1px solid #cccccc;
            }
            QMenu::item {
                padding: 8px 30px 8px 20px;
                min-width: 200px;
            }
            QMenu::item:selected {
                background-color: #e6e6e6;
            }
        """)
        self.setMenu(self.menu)


class MainWindow(QMainWindow):
    def __init__(self, usuario=None, empresa=None, id_funcionario=None):
        super().__init__()
        self.usuario = usuario if usuario else "Usu√°rio"
        self.empresa = empresa if empresa else "Empresa"
        self.id_funcionario = id_funcionario
        self.permissoes = {}  # Dicion√°rio para armazenar permiss√µes
        self.opened_windows = []
        self.contadores_labels = {}  # Armazenar refer√™ncias aos labels de contagem
        
        # Carregar permiss√µes do funcion√°rio (se aplic√°vel)
        self.carregar_permissoes()
        
        self.initUI()
        
        # Atualizar visibilidade do bot√£o PDV com base nas permiss√µes
        self.atualizar_visibilidade_pdv()
        
        # Configurar timer para atualizar contadores a cada 30 segundos
        self.timer_atualizacao = QTimer(self)
        self.timer_atualizacao.timeout.connect(self.atualizar_contadores)
        self.timer_atualizacao.start(30000)  # 30 segundos
        
        # Configurar timer para verificar o Syncthing periodicamente
        self.timer_syncthing = QTimer(self)
        self.timer_syncthing.timeout.connect(self.verificar_syncthing)
        self.timer_syncthing.start(60000)  # Verificar a cada 60 segundos
        
        # Definir janela para maximizada (n√£o tela cheia)
        self.showMaximized()
    
    def verificar_syncthing(self):
        """Verifica se o Syncthing est√° rodando e o reinicia se necess√°rio"""
        try:
            from base.syncthing_manager import syncthing_manager
            if not syncthing_manager.verificar_syncthing_rodando():
                print("Syncthing n√£o est√° rodando. Tentando reiniciar...")
                syncthing_manager.iniciar_syncthing()
        except Exception as e:
            print(f"Erro ao verificar status do Syncthing: {e}")

    def carregar_permissoes(self):
        """Carrega as permiss√µes do funcion√°rio logado"""
        if not self.id_funcionario:
            # Se n√£o for um funcion√°rio espec√≠fico, conceder acesso total
            return
            
        try:
            # Instanciar a classe de backend da configura√ß√£o do sistema
            from ferramentas.configuracao_sistema import ConfiguracaoSistemaBackend
            backend = ConfiguracaoSistemaBackend()
            
            # Carregar todas as permiss√µes do funcion√°rio
            self.permissoes = backend.obter_permissoes_funcionario(self.id_funcionario)
            
            # Atualizar a visibilidade dos elementos da interface com base nas permiss√µes
            if hasattr(self, 'pdv_button'):
                self.atualizar_visibilidade_pdv()
                
            print(f"Permiss√µes carregadas para o funcion√°rio ID {self.id_funcionario}: {self.permissoes}")
        except Exception as e:
            print(f"Erro ao carregar permiss√µes: {e}")
            # Em caso de erro, n√£o aplica filtros
            self.permissoes = {}
    
    def verificar_permissao(self, modulo):
        """Verifica se o funcion√°rio tem permiss√£o para acessar um m√≥dulo"""
        # Se n√£o for um funcion√°rio espec√≠fico, conceder acesso total
        if not self.id_funcionario:
            return True
            
        # Verificar permiss√£o espec√≠fica
        return self.permissoes.get(modulo, False)
    
    def add_menu_actions_with_permission(self, button, action_titles, window):
        """Adiciona a√ß√µes ao menu com verifica√ß√£o de permiss√£o"""
        for title in action_titles:
            # Verificar se o funcion√°rio tem permiss√£o
            if self.verificar_permissao(title) or not self.id_funcionario:
                action = QAction(title, button)
                action.triggered.connect(lambda checked, t=title: window.menu_action_triggered(t))
                button.menu.addAction(action)
    
    def atualizar_visibilidade_pdv(self):
        """Atualiza a visibilidade do bot√£o PDV com base nas permiss√µes"""
        # Verificar se tem permiss√£o para o PDV
        tem_permissao_pdv = self.verificar_permissao("PDV - Ponto de Venda")
        
        # Exibir ou ocultar o bot√£o PDV conforme permiss√£o
        if hasattr(self, 'pdv_button'):
            if not tem_permissao_pdv and self.id_funcionario:
                # Esconder o bot√£o se n√£o tiver permiss√£o
                self.pdv_button.hide()
            else:
                # Mostrar o bot√£o se tiver permiss√£o ou se n√£o for funcion√°rio espec√≠fico
                self.pdv_button.show()
        
    def initUI(self):
        self.setWindowTitle("MB Sistema - Sistema de Gerenciamento")
        self.setGeometry(100, 100, 1200, 700)
        self.setStyleSheet("background-color: #272525;")
        
        # central widget
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)
        main_layout.setContentsMargins(10, 10, 10, 10)
        
        # menu bar
        menu_frame = QFrame()
        menu_frame.setStyleSheet("background-color: #272525;")
        menu_layout = QHBoxLayout(menu_frame)
        menu_layout.setSpacing(5)
        
        btn_geral = MenuButton("GERAL")
        btn_produtos = MenuButton("PRODUTOS E\nSERVI√áOS")
        btn_compras = MenuButton("COMPRAS")
        btn_vendas = MenuButton("VENDAS")
        btn_financeiro = MenuButton("FINANCEIRO")
        btn_relatorios = MenuButton("RELAT√ìRIOS")
        btn_ferramentas = MenuButton("FERRAMENTAS")
        
        # Uso do novo m√©todo para adicionar a√ß√µes com verifica√ß√£o de permiss√£o
        self.add_menu_actions_with_permission(btn_geral, [
            "Cadastro de empresa",
            "Cadastro de Clientes",
            "Cadastro Funcion√°rios",
            "Consulta CNPJ"
        ], self)
        
        self.add_menu_actions_with_permission(btn_produtos, ["Produtos"], self)
        
        self.add_menu_actions_with_permission(btn_compras, ["Fornecedores"], self)
        
        self.add_menu_actions_with_permission(btn_vendas, ["Pedido de vendas"], self)
        
        self.add_menu_actions_with_permission(btn_financeiro, [
            "Recebimento de clientes",
            "Gerar lan√ßamento Financeiro",
            "Controle de caixa (PDV)",
            "Conta corrente",
            "Classes financeiras"
        ], self)
        
        self.add_menu_actions_with_permission(btn_relatorios, [
            "Relat√≥rio de Vendas de Produtos",
            "Hist√≥rico de Cupons",
        ], self)
        
        self.add_menu_actions_with_permission(btn_ferramentas, [
            "Configura√ß√£o de esta√ß√£o", 
            "Configura√ß√£o do Sistema"
        ], self)
        
        for btn in (btn_geral, btn_produtos, btn_compras, btn_vendas,
                    btn_financeiro, btn_relatorios, btn_ferramentas):
            menu_layout.addWidget(btn)
        main_layout.addWidget(menu_frame)
        
        # √Årea de conte√∫do com tela inicial
        home_screen = QWidget()
        home_screen.setStyleSheet("background-color: #005079;")
        home_layout = QVBoxLayout(home_screen)
        home_layout.setAlignment(Qt.AlignCenter)

        # Logo
        logo_label = QLabel()
        logo_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "ico-img", "logo.png")
        logo_pixmap = QPixmap(logo_path)
        if not logo_pixmap.isNull():
            logo_label.setPixmap(logo_pixmap.scaled(400, 120, Qt.KeepAspectRatio, Qt.SmoothTransformation))
        else:
            logo_label.setText("erro logo")
            logo_label.setFont(QFont("Arial", 24, QFont.Bold))
            logo_label.setStyleSheet("color: #00E676;")
            logo_label.setAlignment(Qt.AlignCenter)

        home_layout.addWidget(logo_label)

        # T√≠tulo principal
        system_title = QLabel("MB Sistema")
        system_title.setFont(QFont("Arial", 36, QFont.Bold))
        system_title.setStyleSheet("color: white;")
        system_title.setAlignment(Qt.AlignCenter)
        home_layout.addWidget(system_title)

        # Subt√≠tulo
        system_subtitle = QLabel("Sistema de gerenciamento")
        system_subtitle.setFont(QFont("Arial", 26))
        system_subtitle.setStyleSheet("color: white;")
        system_subtitle.setAlignment(Qt.AlignCenter)
        home_layout.addWidget(system_subtitle)

        # Container das caixas de informa√ß√£o
        info_frame = QFrame()
        info_frame.setMaximumHeight(180)
        info_layout = QHBoxLayout(info_frame)
        info_layout.setSpacing(30)
        info_layout.setContentsMargins(50, 20, 50, 20)

        # Criar caixas de informa√ß√£o com √≠cones espec√≠ficos
        self.criar_caixa_info(info_layout, "Clientes", "user.png", self.obter_contagem_pessoas())
        self.criar_caixa_info(info_layout, "Produtos", "product.png", self.obter_contagem_produtos())
        self.criar_caixa_info(info_layout, "Vendas", "sales.png", self.obter_contagem_vendas())

        home_layout.addWidget(info_frame)

        # Informa√ß√µes do usu√°rio
        user_info = QLabel(f"Usu√°rio: {self.usuario} | Empresa: {self.empresa}")
        user_info.setFont(QFont("Arial", 14))
        user_info.setStyleSheet("color: white; margin-top: 10px;")
        user_info.setAlignment(Qt.AlignCenter)
        home_layout.addWidget(user_info)

        # NOVO: Informa√ß√µes do desenvolvedor
        dev_info = QLabel("Desenvolvido e programado por Marco Ant√¥nio")
        dev_info.setFont(QFont("Arial", 12, -1, True))
        dev_info.setStyleSheet("color: #cccccc; margin-top: 5px;")
        dev_info.setAlignment(Qt.AlignCenter)
        home_layout.addWidget(dev_info)

        # finalmente adiciona a tela home ao layout principal
        main_layout.addWidget(home_screen, 1)
        
        # Bot√£o de WhatsApp - vers√£o modificada para abrir janela de contatos
        self.botao_whatsapp = QPushButton(self)
        whatsapp_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "ico-img", "whatsapp2.png")
        
        if os.path.exists(whatsapp_path):
            self.botao_whatsapp.setIcon(QIcon(whatsapp_path))
            self.botao_whatsapp.setIconSize(QSize(60, 60))
        else:
            print(f"AVISO: √çcone do WhatsApp n√£o encontrado em: {whatsapp_path}")
            self.botao_whatsapp.setText("WhatsApp")
            self.botao_whatsapp.setStyleSheet("color: white; font-weight: bold;")
        
        # Estilo do bot√£o
        self.botao_whatsapp.setFixedSize(80, 80)
        self.botao_whatsapp.setStyleSheet("""
            QPushButton {
                background-color: #25D366;
                border-radius: 40px;
                border: 2px solid white;
            }
            QPushButton:hover {
                background-color: #128C7E;
            }
        """)
        
        # Adicionar sombra
        sombra = QGraphicsDropShadowEffect(self.botao_whatsapp)
        sombra.setBlurRadius(15)
        sombra.setColor(Qt.black)
        sombra.setOffset(0, 0)
        self.botao_whatsapp.setGraphicsEffect(sombra)
        
        # Configurar cursor e tooltip
        self.botao_whatsapp.setCursor(QCursor(Qt.PointingHandCursor))
        self.botao_whatsapp.setToolTip("Clique para ver os contatos")
        
        # MODIFICADO: Conectar ao evento de abrir janela de contatos
        self.botao_whatsapp.clicked.connect(self.abrir_janela_contatos)
        
        # Posicionar o bot√£o no canto inferior direito
        self.botao_whatsapp.move(
            self.width() - self.botao_whatsapp.width() - 30,
            self.height() - self.botao_whatsapp.height() - 30
        )
        
        # M√©todo para reposicionar o bot√£o quando a janela for redimensionada
        def novo_resize_event(event):
            # Salvar o comportamento original de redimensionamento
            if hasattr(self, '_resize_original'):
                self._resize_original(event)
            else:
                super(MainWindow, self).resizeEvent(event)
            
            # Reposicionar o bot√£o WhatsApp
            self.botao_whatsapp.move(
                self.width() - self.botao_whatsapp.width() - 30,
                self.height() - self.botao_whatsapp.height() - 30
            )
        
        # Salvar o m√©todo de redimensionamento original e substitu√≠-lo
        self._resize_original = self.resizeEvent
        self.resizeEvent = novo_resize_event
        
        # Adicionar efeito de aumento ao passar o mouse
        def on_enter(event):
            self.animar_botao(self.botao_whatsapp, 1.2)
        
        def on_leave(event):
            self.animar_botao(self.botao_whatsapp, 1.0)
            
        self.botao_whatsapp.enterEvent = on_enter
        self.botao_whatsapp.leaveEvent = on_leave
        
        # Garantir que o bot√£o fique por cima de outros widgets
        self.botao_whatsapp.raise_()
        
        # Importar e adicionar o assistente virtual
        try:
            from assistente import adicionar_assistente_ao_sistema
            adicionar_assistente_ao_sistema(self)
            print("Assistente Virtual carregado com sucesso!")
        except Exception as e:
            print(f"Erro ao carregar Assistente Virtual: {e}")

        # Cria√ß√£o do bot√£o de acesso ao PDV no canto superior esquerdo
        self.pdv_button = QPushButton("Acesso ao\nPDV", self)
        self.pdv_button.setFixedSize(180, 80)  # Aumentado o tamanho do bot√£o
        self.pdv_button.setStyleSheet("""
            QPushButton {
                background-color: #2E8B57;
                color: white;
                border-radius: 10px;
                font-weight: bold;
                text-align: center;
                padding: 5px;
                font-size: 18px;
            }
            QPushButton:hover {
                background-color: #1D6F42;
            }
            QPushButton:pressed {
                background-color: #125C30;
            }
        """)
        
        # Adicionar √≠cone correto ao bot√£o (caixa.png)
        pdv_icon_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "ico-img", "caixa.png")
        if os.path.exists(pdv_icon_path):
            self.pdv_button.setIcon(QIcon(pdv_icon_path))
            self.pdv_button.setIconSize(QSize(45, 45))  # √çcone maior para o bot√£o maior
        else:
            # Caso o √≠cone n√£o exista, cria um emoji como fallback
            print(f"AVISO: √çcone de caixa n√£o encontrado em: {pdv_icon_path}")
            # Usar emoji de cashier/register como √≠cone alternativo no texto
            self.pdv_button.setText("üßæ\nAcesso ao\nPDV")
            self.pdv_button.setFont(QFont("Arial", 10, QFont.Bold))
        
        # Adicionar sombra ao bot√£o
        pdv_shadow = QGraphicsDropShadowEffect(self.pdv_button)
        pdv_shadow.setBlurRadius(15)
        pdv_shadow.setColor(Qt.black)
        pdv_shadow.setOffset(0, 0)
        self.pdv_button.setGraphicsEffect(pdv_shadow)
        
        # Conectar ao clique
        self.pdv_button.setCursor(QCursor(Qt.PointingHandCursor))
        self.pdv_button.clicked.connect(self.abrir_pdv)
        
        # Posicionar o bot√£o logo abaixo do menu "GERAL" (ajustado mais para baixo)
        self.pdv_button.move(30, 90)  # Mantida a mesma posi√ß√£o vertical
        self.pdv_button.raise_()
        
        # M√©todo para reposicionar o bot√£o PDV quando a janela for redimensionada
        def pdv_resize_event(event):
            # Chamar o m√©todo original de redimensionamento
            if hasattr(self, '_resize_original_pdv'):
                self._resize_original_pdv(event)
            else:
                novo_resize_event(event)
            
            # Manter o bot√£o PDV na posi√ß√£o correta (abaixo do menu GERAL)
            self.pdv_button.move(30, 90)  # Ajustado para a nova posi√ß√£o
        
        # Salvar o m√©todo anterior e substituir
        self._resize_original_pdv = self.resizeEvent
        self.resizeEvent = pdv_resize_event
        
        # mapeamentos
        self.action_to_py_file = {
            "Cadastro de empresa": os.path.join("geral", "cadastro_empresa.py"),
            "Cadastro de Clientes": os.path.join("geral", "cadastro_pessoa.py"),
            "Cadastro Funcion√°rios": os.path.join("geral", "cadastro_funcionarios.py"),
            "Consulta CNPJ": os.path.join("geral", "consulta_cnpj.py"),
            "Produtos": os.path.join("produtos_e_servicos", "produtos.py"),
            "Grupo de produtos": os.path.join("produtos_e_servicos", "grupo_produtos.py"),
            "Un - unidade de medida": os.path.join("produtos_e_servicos", "unidade_medida.py"),
            "Fornecedores": os.path.join("compras", "fornecedores.py"),
            "Clientes": os.path.join("vendas", "clientes.py"),
            "Pedido de vendas": os.path.join("vendas", "pedido_vendas.py"),
            "Recebimento de clientes": os.path.join("financeiro", "recebimento_clientes.py"),
            "Gerar lan√ßamento Financeiro": os.path.join("financeiro", "lancamento_financeiro.py"),
            "Controle de caixa (PDV)": os.path.join("financeiro", "controle_caixa.py"),
            "Conta corrente": os.path.join("financeiro", "conta_corrente.py"),
            "Classes financeiras": os.path.join("financeiro", "classes_financeiras.py"),
            #"Fiscal NF-e, SAT, NFC-e": os.path.join("relatorios", "relatorio_fiscal.py"),
            "Relat√≥rio de Vendas de Produtos": os.path.join("relatorios", "relatorio_vendas_produtos.py"), 
            "Hist√≥rico de Cupons": os.path.join("relatorios", "historico_cupom.py"), 
            "Configura√ß√£o de esta√ß√£o": os.path.join("ferramentas", "configuracao_impressora.py"),
            "Configura√ß√£o do Sistema": os.path.join("ferramentas", "configuracao_sistema.py"),
            "PDV - Ponto de Venda": os.path.join("PDV", "PDV_principal.py")
        }
        # casos especiais de nome de classe
        self.action_to_class = {
            # GERAL
            "Cadastro de empresa":          "CadastroEmpresaWindow",
            "Cadastro de Clientes":  "CadastroPessoaWindow",
            "Cadastro Funcion√°rios":        "CadastroFuncionariosWindow",
            "Consulta CNPJ":                "ConsultaCNPJWindow",
            # PRODUTOS E SERVI√áOS
            "Produtos":                     "ProdutosWindow",
            "Grupo de produtos":            "GrupoProdutosWindow",
            "Un - unidade de medida":       "UnidadeMedidaWindow",
            # COMPRAS
            "Fornecedores":                 "FornecedoresWindow",
            # VENDAS
            "Clientes":                     "ClientesWindow",
            "Pedido de vendas":             "PedidoVendasWindow",
            # FINANCEIRO
            "Recebimento de clientes":      "RecebimentoClientesWindow",
            "Gerar lan√ßamento Financeiro":  "LancamentoFinanceiroWindow",
            "Controle de caixa (PDV)":      "ControleCaixaWindow",
            "Conta corrente":               "ContaCorrenteWindow",
            "Classes financeiras":          "ClassesFinanceirasWindow",
            # RELAT√ìRIOS
            "Fiscal NF-e, SAT, NFC-e":      "RelatorioFiscalWindow",
            "Relat√≥rio de Vendas de Produtos":                      "RelatorioVendasWindow",
            "Hist√≥rico de Cupons":          "HistoricoCuponsWindow",
            # FERRAMENTAS
            "Configura√ß√£o de esta√ß√£o":      "ConfiguracaoImpressoraWindow",
            "Configura√ß√£o do Sistema": "ConfiguracaoSistemaWindow",
            # PDV
            "PDV - Ponto de Venda":         "PDVWindow"
        }

    def abrir_janela_contatos(self):
        """Abre a janela de contatos do WhatsApp"""
        try:
            # Criar e exibir a janela de contatos
            contatos_dialog = ContatosWhatsAppDialog(self)
            contatos_dialog.exec_()  # Usar exec_() para janela modal
        except Exception as e:
            print(f"Erro ao abrir janela de contatos: {e}")
            QMessageBox.warning(self, "Erro", f"Erro ao abrir janela de contatos: {str(e)}")

    def navegar_para_modulo(self, modulo, acao):
        """Navegar para um m√≥dulo espec√≠fico do sistema"""
        print(f"Navegando para: {modulo} > {acao}")
        
        # Mapear para os action_titles corretos
        mapa_navegacao = {
            ("geral", "cadastro_pessoa"): "Cadastro de Clientes",
            ("geral", "cadastro_empresa"): "Cadastro de empresa",
            ("geral", "cadastro_funcionarios"): "Cadastro Funcion√°rios",
            ("geral", "consulta_cnpj"): "Consulta CNPJ",
            ("produtos", "produtos"): "Produtos",
            ("pdv", "pdv_principal"): "PDV - Ponto de Venda",
            ("compras", "fornecedores"): "Fornecedores",
            ("vendas", "pedido_vendas"): "Pedido de vendas",
            ("financeiro", "recebimento_clientes"): "Recebimento de clientes",
            ("financeiro", "lancamento_financeiro"): "Gerar lan√ßamento Financeiro",
            ("financeiro", "controle_caixa"): "Controle de caixa (PDV)",
            ("financeiro", "conta_corrente"): "Conta corrente",
            ("financeiro", "classes_financeiras"): "Classes financeiras",
            ("relatorios", "relatorio_vendas_produtos"): "Relat√≥rio de Vendas de Produtos",
            ("ferramentas", "configuracao_impressora"): "Configura√ß√£o de esta√ß√£o",
            ("ferramentas", "configuracao_sistema"): "Configura√ß√£o do Sistema"
        }
        
        chave = (modulo, acao)
        if chave in mapa_navegacao:
            self.menu_action_triggered(mapa_navegacao[chave])

    def abrir_pdv(self):
        """Abre o m√≥dulo do PDV"""
        # Verificar permiss√£o
        if not self.verificar_permissao("PDV - Ponto de Venda") and self.id_funcionario:
            QMessageBox.warning(self, "Acesso Negado", 
                             "Voc√™ n√£o tem permiss√£o para acessar o PDV.")
            return

        try:
            pdv_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "PDV", "PDV_principal.py")
            
            if not os.path.exists(pdv_path):
                print(f"ERRO: Arquivo PDV n√£o existe: {pdv_path}")
                QMessageBox.warning(self, "Erro", f"M√≥dulo PDV n√£o encontrado!")
                return
                
            # Verificar se j√° est√° aberto
            self.opened_windows = [w for w in self.opened_windows if w.isVisible()]
            for w in self.opened_windows:
                if w.windowTitle() == "PDV - Ponto de Venda":
                    w.setWindowState(w.windowState() & ~Qt.WindowMinimized)
                    w.activateWindow()
                    return
                    
            # Importar e abrir o m√≥dulo PDV
            spec = importlib.util.spec_from_file_location("PDV_principal", pdv_path)
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)
            
            # Assumindo que a classe se chama PDVWindow
            WindowClass = getattr(module, "PDVWindow", None)
            
            if not WindowClass:
                print("Classe PDVWindow n√£o encontrada no m√≥dulo PDV")
                QMessageBox.warning(self, "Erro", "N√£o foi poss√≠vel iniciar o PDV!")
                return
                
            # Criar e exibir a janela
            win = WindowClass()
            # Adicionar refer√™ncia √† janela principal
            if hasattr(win, 'set_janela_principal'):
                win.set_janela_principal(self)
            # Passar credenciais do usu√°rio e ID do funcion√°rio se a janela aceitar
            if hasattr(win, 'set_credentials'):
                win.set_credentials(self.usuario, self.empresa, self.id_funcionario)
            win.setWindowTitle("PDV - Ponto de Venda")
            win.show()
            
            # Adicionar √† lista de janelas abertas
            self.opened_windows.append(win)
            
        except Exception as e:
            print(f"ERRO ao abrir o PDV: {e}")
            import traceback
            traceback.print_exc()
            QMessageBox.warning(self, "Erro", f"N√£o foi poss√≠vel abrir o PDV: {str(e)}")

    
    def criar_caixa_info(self, layout_pai, titulo, nome_icone, contagem):
        """Cria uma caixa de informa√ß√£o com t√≠tulo, √≠cone e contagem - INTERATIVA"""
        # Container wrapper para manter espa√ßo constante durante anima√ß√£o
        wrapper = QWidget()
        wrapper.setFixedSize(200, 170)
        wrapper.setStyleSheet("background-color: transparent;")
        
        box_frame = QFrame(wrapper)
        box_frame.setFixedSize(180, 150)
        box_frame.move(10, 10)  # Centralizar no wrapper
        box_frame.setStyleSheet("""
            QFrame {
                background-color: #00283d;
                border-radius: 15px;
                border: 2px solid transparent;
            }
        """)
        
        # Tornar o frame clic√°vel
        box_frame.setCursor(QCursor(Qt.PointingHandCursor))
        
        # Adicionar efeito de sombra
        sombra = QGraphicsDropShadowEffect()
        sombra.setBlurRadius(15)
        sombra.setColor(QColor(0, 0, 0, 80))
        sombra.setOffset(0, 3)
        box_frame.setGraphicsEffect(sombra)
        
        # Guardar refer√™ncia da sombra no frame
        box_frame.sombra = sombra
        
        box_layout = QVBoxLayout(box_frame)
        box_layout.setSpacing(10)
        
        # T√≠tulo
        label_titulo = QLabel(titulo)
        label_titulo.setFont(QFont("Arial", 16, QFont.Bold))
        label_titulo.setStyleSheet("color: white; background: transparent;")
        label_titulo.setAlignment(Qt.AlignCenter)
        
        # √çcone espec√≠fico para cada categoria
        label_icone = QLabel()
        label_icone.setStyleSheet("background: transparent;")
        
        # Mapear √≠cones personalizados de acordo com o t√≠tulo
        icone_caminho = ""
        if nome_icone == "user.png":
            icone_caminho = os.path.join(os.path.dirname(os.path.abspath(__file__)), "ico-img", "user.png")
            emoji_fallback = "üë•"
        elif nome_icone == "product.png":
            icone_caminho = os.path.join(os.path.dirname(os.path.abspath(__file__)), "ico-img", "product.png")
            emoji_fallback = "üì¶"
        elif nome_icone == "sales.png":
            icone_caminho = os.path.join(os.path.dirname(os.path.abspath(__file__)), "ico-img", "sales.png")
            emoji_fallback = "üí∞"
        
        # Verificar se o √≠cone existe ou usar emoji como alternativa
        if os.path.exists(icone_caminho):
            pixmap_icone = QPixmap(icone_caminho)
            label_icone.setPixmap(pixmap_icone.scaled(60, 60, Qt.KeepAspectRatio, Qt.SmoothTransformation))
        else:
            label_icone.setText(emoji_fallback)
            label_icone.setFont(QFont("Arial", 36, QFont.Bold))
            label_icone.setStyleSheet("color: white; background: transparent;")
        
        label_icone.setAlignment(Qt.AlignCenter)
        
        # Contagem (formatada como moeda se for Vendas)
        if titulo == "Vendas":
            try:
                valor_numerico = float(contagem)
                valor_formatado = f"R$ {valor_numerico:.2f}".replace('.', ',')
            except (ValueError, TypeError):
                valor_formatado = "R$ 0,00"
                
            label_contagem = QLabel(valor_formatado)
            label_contagem.setFont(QFont("Arial", 20, QFont.Bold))
        else:
            label_contagem = QLabel(str(contagem))
            label_contagem.setFont(QFont("Arial", 24, QFont.Bold))
        
        label_contagem.setStyleSheet("color: white; background: transparent;")
        label_contagem.setAlignment(Qt.AlignCenter)
        
        # Adicionar ao layout
        box_layout.addWidget(label_titulo)
        box_layout.addWidget(label_icone)
        box_layout.addWidget(label_contagem)
        
        # Adicionar evento de clique baseado no t√≠tulo
        def on_click(event):
            if titulo == "Clientes":
                self.menu_action_triggered("Cadastro de Clientes")
            elif titulo == "Produtos":
                self.menu_action_triggered("Produtos")
            elif titulo == "Vendas":
                self.menu_action_triggered("Relat√≥rio de Vendas de Produtos")
        
        box_frame.mousePressEvent = on_click
        
        # Adicionar anima√ß√£o de hover
        def on_enter(event):
            self.animar_caixa_info(box_frame, aumentar=True)
            
        def on_leave(event):
            self.animar_caixa_info(box_frame, aumentar=False)
            
        box_frame.enterEvent = on_enter
        box_frame.leaveEvent = on_leave
        
        # Adicionar o wrapper ao layout principal
        layout_pai.addWidget(wrapper)
        
        # Armazenar refer√™ncia ao label para atualiza√ß√£o posterior
        self.contadores_labels[titulo] = label_contagem
        
        # Armazenar refer√™ncia ao frame para anima√ß√µes
        if not hasattr(self, 'info_frames'):
            self.info_frames = {}
        self.info_frames[titulo] = box_frame
        
        return label_contagem
    
        layout_pai.addWidget(wrapper)
    
    def animar_caixa_info(self, caixa, aumentar=True):
        """Anima a caixa de informa√ß√£o para aumentar/diminuir de tamanho"""
        # Criar grupo de anima√ß√µes para animar m√∫ltiplas propriedades
        if not hasattr(caixa, '_anim_group'):
            from PyQt5.QtCore import QParallelAnimationGroup
            caixa._anim_group = QParallelAnimationGroup()
            
            # Anima√ß√£o de geometria
            caixa._anim_geo = QPropertyAnimation(caixa, b"geometry")
            caixa._anim_geo.setDuration(200)
            caixa._anim_geo.setEasingCurve(QEasingCurve.OutCubic)
            caixa._anim_group.addAnimation(caixa._anim_geo)
        
        # Parar anima√ß√µes em andamento
        caixa._anim_group.stop()
        
        # Obter geometria atual
        geo_atual = caixa.geometry()
        
        if aumentar:
            # Calcular nova geometria (aumento de 10%)
            novo_width = int(180 * 1.1)
            novo_height = int(150 * 1.1)
            
            # Calcular posi√ß√£o para manter centralizado
            novo_x = geo_atual.x() - (novo_width - geo_atual.width()) // 2
            novo_y = geo_atual.y() - (novo_height - geo_atual.height()) // 2
            
            # Garantir que n√£o saia dos limites do wrapper
            novo_x = max(0, min(novo_x, 200 - novo_width))
            novo_y = max(0, min(novo_y, 170 - novo_height))
            
            nova_geo = QRect(novo_x, novo_y, novo_width, novo_height)
            
            # Atualizar estilo (sem borda verde)
            caixa.setStyleSheet("""
                QFrame {
                    background-color: #003d5c;
                    border-radius: 15px;
                    border: none;
                }
            """)
            
            # Aumentar sombra
            if hasattr(caixa, 'sombra'):
                caixa.sombra.setBlurRadius(25)
                caixa.sombra.setOffset(0, 8)
                caixa.sombra.setColor(QColor(0, 0, 0, 120))
                
        else:
            # Voltar ao tamanho original
            nova_geo = QRect(10, 10, 180, 150)
            
            # Restaurar estilo original (sem borda)
            caixa.setStyleSheet("""
                QFrame {
                    background-color: #00283d;
                    border-radius: 15px;
                    border: none;
                }
            """)
            
            # Restaurar sombra original
            if hasattr(caixa, 'sombra'):
                caixa.sombra.setBlurRadius(15)
                caixa.sombra.setOffset(0, 3)
                caixa.sombra.setColor(QColor(0, 0, 0, 80))
        
        # Configurar e iniciar anima√ß√£o
        caixa._anim_geo.setStartValue(geo_atual)
        caixa._anim_geo.setEndValue(nova_geo)
        caixa._anim_group.start()


    # Alternativa: M√©todo que remove o animar_caixa antigo e usa esta vers√£o
    def animar_caixa(self, caixa, fator_escala):
        """Vers√£o compat√≠vel com o c√≥digo antigo"""
        aumentar = fator_escala > 1.0
        self.animar_caixa_info(caixa, aumentar)

    def atualizar_contadores(self):
        """Atualiza os contadores de todas as caixas de informa√ß√£o"""
        try:
            print("Iniciando atualiza√ß√£o dos contadores...")
            
            # Atualizar contador de clientes (com anima√ß√£o)
            if "Clientes" in self.contadores_labels:
                novo_valor = self.obter_contagem_pessoas()
                self.atualizar_contador_com_animacao(self.contadores_labels["Clientes"], novo_valor)
                print(f"Contador de Clientes atualizado: {novo_valor}")
                    
            # Atualizar contador de produtos (com anima√ß√£o)
            if "Produtos" in self.contadores_labels:
                novo_valor = self.obter_contagem_produtos()
                self.atualizar_contador_com_animacao(self.contadores_labels["Produtos"], novo_valor)
                print(f"Contador de Produtos atualizado: {novo_valor}")
                    
            # Atualizar contador de vendas SEM anima√ß√£o de cor
            if "Vendas" in self.contadores_labels:
                novo_valor = self.obter_contagem_vendas()
                label = self.contadores_labels["Vendas"]
                
                # Apenas atualizar o texto sem mudar a cor
                valor_formatado = f"R$ {novo_valor:.2f}".replace('.', ',')
                label.setText(valor_formatado)
                print(f"Contador de Vendas atualizado: {valor_formatado}")
                    
            print("Contadores atualizados com sucesso!")
        except Exception as e:
            print(f"Erro ao atualizar contadores: {e}")
            import traceback
            traceback.print_exc()

    # M√©todo para garantir que o PDV atualize a tela principal
    def forcar_atualizacao_contadores(self):
        """For√ßa a atualiza√ß√£o imediata dos contadores na tela principal"""
        print("For√ßando atualiza√ß√£o dos contadores a partir do PDV...")
        QTimer.singleShot(100, self.atualizar_contadores) 

    def atualizar_contador_com_animacao(self, label, novo_valor):
        """Atualiza um contador com uma anima√ß√£o de destaque"""
        # Verificar se √© um valor monet√°rio (texto come√ßa com R$)
        texto_atual = label.text()
        if texto_atual.startswith("R$"):
            # Extrair o valor num√©rico atual
            try:
                valor_atual = float(texto_atual.replace("R$", "").replace(".", "").replace(",", ".").strip())
                
                # Verificar se o valor mudou
                if abs(valor_atual - novo_valor) > 0.01:  # Pequena margem para compara√ß√£o de float
                    # Salvar o estilo original
                    estilo_original = label.styleSheet()
                    
                    # Aplicar estilo de destaque
                    label.setStyleSheet("color: #00E676; font-weight: bold;")
                    
                    # Atualizar o valor formatado como moeda
                    valor_formatado = f"R$ {novo_valor:.2f}".replace('.', ',')
                    label.setText(valor_formatado)
                    
                    # Criar timer para restaurar o estilo original ap√≥s 1 segundo
                    QTimer.singleShot(1000, lambda: label.setStyleSheet(estilo_original))
            except ValueError:
                # Se houver erro ao converter, apenas atualiza o texto
                valor_formatado = f"R$ {novo_valor:.2f}".replace('.', ',')
                label.setText(valor_formatado)
        else:
            # Para valores n√£o monet√°rios (contadores simples)
            valor_atual = int(texto_atual) if texto_atual.isdigit() else 0
            
            if valor_atual != novo_valor:
                # Salvar o estilo original
                estilo_original = label.styleSheet()
                
                # Aplicar estilo de destaque
                label.setStyleSheet("color: #00E676; font-weight: bold;")
                
                # Atualizar o valor
                label.setText(str(novo_valor))
                
                # Criar timer para restaurar o estilo original ap√≥s 1 segundo
                QTimer.singleShot(1000, lambda: label.setStyleSheet(estilo_original))

    def animar_botao(self, botao, fator_escala):
        """Anima o bot√£o para aumentar/diminuir de tamanho"""
        # Criar anima√ß√£o para largura
        anim_largura = QPropertyAnimation(botao, b"minimumWidth")
        anim_largura.setDuration(150)
        anim_largura.setStartValue(botao.width())
        anim_largura.setEndValue(int(80 * fator_escala))
        anim_largura.setEasingCurve(QEasingCurve.OutCubic)
        
        # Criar anima√ß√£o para altura
        anim_altura = QPropertyAnimation(botao, b"minimumHeight")
        anim_altura.setDuration(150)
        anim_altura.setStartValue(botao.height())
        anim_altura.setEndValue(int(80 * fator_escala))
        anim_altura.setEasingCurve(QEasingCurve.OutCubic)
        
        # Iniciar anima√ß√µes
        anim_largura.start()
        anim_altura.start()
        
        # Tamb√©m animar o tamanho do √≠cone
        botao.setIconSize(QSize(int(60 * fator_escala), int(60 * fator_escala)))

    def abrir_whatsapp(self, numero_telefone):
        """Abre o WhatsApp com o n√∫mero de telefone especificado"""
        try:
            # Verificar se o n√∫mero de telefone est√° no formato correto
            numero_limpo = ''.join(filter(str.isdigit, numero_telefone))
            url = QUrl(f"https://wa.me/{numero_limpo}")
            
            # Imprimir para debug
            print(f"Abrindo URL: {url.toString()}")
            
            # Abrir URL
            resultado = QDesktopServices.openUrl(url)
            
            # Verificar se a URL foi aberta com sucesso
            if resultado:
                print("URL aberta com sucesso!")
            else:
                print("Falha ao abrir a URL.")
                # Alternativa: tentar abrir com o m√©todo tradicional
                import webbrowser
                webbrowser.open(f"https://wa.me/{numero_limpo}")
                
        except Exception as e:
            print(f"Erro ao abrir WhatsApp: {e}")
            # Mostrar mensagem de erro para o usu√°rio
            QMessageBox.warning(self, "Erro", f"Erro ao abrir WhatsApp: {str(e)}")

    def obter_contagem_pessoas(self):
        """Obt√©m a contagem de PESSOAS do banco de dados"""
        try:
            from base.banco import execute_query
            result = execute_query("SELECT COUNT(*) FROM PESSOAS")
            return result[0][0] if result and result[0][0] else 0
        except Exception as e:
            print(f"Erro ao contar pessoas: {e}")
            return 0

    def obter_contagem_produtos(self):
        """Obt√©m a contagem de PRODUTOS do banco de dados"""
        try:
            from base.banco import execute_query
            result = execute_query("SELECT COUNT(*) FROM PRODUTOS")
            return result[0][0] if result and result[0][0] else 0
        except Exception as e:
            print(f"Erro ao contar produtos: {e}")
            return 0

    def obter_contagem_vendas(self):
        """Obt√©m o valor total das vendas do dia atual"""
        try:
            # Importar datetime para obter a data atual
            from datetime import datetime, date
            
            # Obter a data atual
            data_atual = date.today()
            
            # Usar conex√£o direta
            from base.banco import get_connection
            
            # Obter conex√£o e criar cursor
            conn = get_connection()
            cursor = conn.cursor()
            
            # Verificar estrutura da tabela VENDAS para identificar a coluna de data
            cursor.execute("SELECT RDB$FIELD_NAME FROM RDB$RELATION_FIELDS WHERE RDB$RELATION_NAME = 'VENDAS'")
            colunas = [col[0].strip() for col in cursor.fetchall()]
            print(f"Colunas na tabela VENDAS: {colunas}")
            
            # Poss√≠veis nomes para a coluna de data
            possiveis_nomes_data = ['DATA_VENDA', 'DATA_EMISSAO', 'DATA', 'DT_VENDA', 'DT_EMISSAO', 'DATA_REGISTRO']
            
            # Encontrar a primeira coluna de data que existe na tabela
            coluna_data = None
            for nome in possiveis_nomes_data:
                if nome in colunas:
                    coluna_data = nome
                    print(f"Coluna de data encontrada: {coluna_data}")
                    break
            
            if not coluna_data:
                print("AVISO: Nenhuma coluna de data encontrada. Usando todas as vendas.")
                # Se n√£o encontrar coluna de data, usar todas as vendas (comportamento atual)
                cursor.execute("SELECT VALOR_TOTAL FROM VENDAS")
            else:
                # Usar EXTRACT para comparar apenas a data no Firebird
                query = f"""
                SELECT VALOR_TOTAL FROM VENDAS 
                WHERE EXTRACT(YEAR FROM {coluna_data}) = ? 
                AND EXTRACT(MONTH FROM {coluna_data}) = ? 
                AND EXTRACT(DAY FROM {coluna_data}) = ?
                """
                params = (data_atual.year, data_atual.month, data_atual.day)
                print(f"Executando query: {query} com par√¢metros {params}")
                cursor.execute(query, params)
            
            valores = cursor.fetchall()
            
            # Somar valores manualmente
            total = 0.0
            for valor in valores:
                if valor[0] is not None:
                    try:
                        total += float(valor[0])
                    except (ValueError, TypeError):
                        print(f"Aviso: Valor inv√°lido encontrado: {valor[0]}")
            
            # Fechar cursor e conex√£o
            cursor.close()
            conn.close()
            
            if coluna_data:
                print(f"Valor total das vendas do dia {data_atual.strftime('%d/%m/%Y')}: {total}")
            else:
                print(f"Valor total de todas as vendas: {total}")
            
            return total
            
        except Exception as e:
            print(f"Erro ao obter total de vendas: {e}")
            import traceback
            traceback.print_exc()
            return 0.0
    
    def diagnosticar_banco(self):
        """Executa diagn√≥stico completo do banco e valores"""
        try:
            # Executar verifica√ß√µes
            print("\n=== DIAGN√ìSTICO DE BANCO DE DADOS ===")
            
            # Testar consulta via conex√£o direta
            from base.banco import get_connection
            
            # Obter conex√£o e criar cursor
            conn = get_connection()
            cursor = conn.cursor()
            
            # Verificar estrutura da tabela VENDAS
            cursor.execute("SELECT COUNT(*) FROM RDB$RELATIONS WHERE RDB$RELATION_NAME = 'VENDAS'")
            tabela_existe = cursor.fetchone()[0] > 0
            print(f"Tabela VENDAS existe: {tabela_existe}")
            
            if tabela_existe:
                # Verificar quantidade de registros
                cursor.execute("SELECT COUNT(*) FROM VENDAS")
                total_registros = cursor.fetchone()[0]
                print(f"Total de registros na tabela VENDAS: {total_registros}")
                
                # Verificar colunas da tabela
                cursor.execute("SELECT RDB$FIELD_NAME FROM RDB$RELATION_FIELDS WHERE RDB$RELATION_NAME = 'VENDAS'")
                colunas = [col[0].strip() for col in cursor.fetchall()]
                print(f"Colunas na tabela VENDAS: {colunas}")
                
                # Verificar se a coluna VALOR_TOTAL existe
                if 'VALOR_TOTAL' in colunas:
                    print("Coluna VALOR_TOTAL encontrada!")
                else:
                    print("ERRO: Coluna VALOR_TOTAL n√£o encontrada na tabela!")
                
                # Em vez de usar SUM, vamos pegar os valores individuais e som√°-los no Python
                cursor.execute("SELECT VALOR_TOTAL FROM VENDAS")
                valores = cursor.fetchall()
                
                # Somar valores manualmente
                total = 0.0
                for valor in valores:
                    if valor[0] is not None:
                        try:
                            total += float(valor[0])
                        except (ValueError, TypeError):
                            print(f"Aviso: Valor inv√°lido encontrado: {valor[0]}")
                
                print(f"Total calculado manualmente: {total}")
                
                # Atualizar o contador na interface
                if hasattr(self, 'contadores_labels') and "Vendas" in self.contadores_labels:
                    valor_formatado = f"R$ {total:.2f}".replace('.', ',')
                    self.contadores_labels["Vendas"].setText(valor_formatado)
                    print(f"Interface atualizada com: {valor_formatado}")
            
            # Fechar cursor e conex√£o
            cursor.close()
            conn.close()
            
            # Mostrar mensagem com o resultado
            from PyQt5.QtWidgets import QMessageBox
            QMessageBox.information(self, "Diagn√≥stico", 
                                f"Diagn√≥stico conclu√≠do! Total de vendas: R$ {total:.2f}")
            
        except Exception as e:
            print(f"Erro no diagn√≥stico: {e}")
            import traceback
            traceback.print_exc()
            
            from PyQt5.QtWidgets import QMessageBox
            QMessageBox.warning(self, "Erro", f"Erro no diagn√≥stico: {str(e)}")

    def normalize_text(self, text):
        normalized = unicodedata.normalize('NFD', text)
        return ''.join(c for c in normalized if not unicodedata.combining(c))

    def load_module_dynamically(self, module_path, class_name):
        try:
            spec = importlib.util.spec_from_file_location("mod", module_path)
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)
            return getattr(module, class_name, None)
        except Exception as e:
            print(f"Erro ao carregar dinamicamente {module_path}: {e}")
            return None

    def menu_action_triggered(self, action_title):
        print(f"Menu action triggered: {action_title}")
        
        # Verificar permiss√£o antes de prosseguir
        if not self.verificar_permissao(action_title) and self.id_funcionario:
            QMessageBox.warning(self, "Acesso Negado", 
                               f"Voc√™ n√£o tem permiss√£o para acessar o m√≥dulo: {action_title}")
            return
        
        # Tratamento especial para m√≥dulos conhecidos com problemas de importa√ß√£o
        special_modules = ["Fiscal NF-e, SAT, NFC-e", "Configura√ß√£o de esta√ß√£o", "Relat√≥rio de Vendas de Produtos"]
        
        # Para todos os m√≥dulos, use uma abordagem mais direta
        # Primeiro, verifica se j√° h√° uma janela aberta
        self.opened_windows = [w for w in self.opened_windows if w.isVisible()]
        for w in self.opened_windows:
            if w.windowTitle() == action_title:
                w.setWindowState(w.windowState() & ~Qt.WindowMinimized)
                w.activateWindow()
                return
        
        # Se o m√≥dulo faz parte da lista especial, use importa√ß√£o direta com tratamento de erros
        if action_title in special_modules:
            try:
                if action_title == "Fiscal NF-e, SAT, NFC-e":
                    # Importa√ß√£o direta para o m√≥dulo de relat√≥rio fiscal
                    rel_path = self.action_to_py_file[action_title]
                    abs_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), rel_path)
                    
                    # Importa√ß√£o expl√≠cita do m√≥dulo de impress√£o
                    from PyQt5.QtPrintSupport import QPrinter, QPrintDialog, QPrintPreviewDialog
                    
                    # Carregamento do m√≥dulo
                    spec = importlib.util.spec_from_file_location("relatorio_fiscal", abs_path)
                    module = importlib.util.module_from_spec(spec)
                    spec.loader.exec_module(module)
                    WindowClass = getattr(module, "RelatorioFiscalWindow")
                    
                elif action_title == "Configura√ß√£o de esta√ß√£o":
                    # Importa√ß√£o direta para configura√ß√£o de impressora
                    rel_path = self.action_to_py_file[action_title]
                    abs_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), rel_path)
                    
                    # Importa√ß√£o expl√≠cita do m√≥dulo de impress√£o
                    from PyQt5.QtPrintSupport import QPrinterInfo, QPrintDialog, QPrinter
                    
                    # Carregamento do m√≥dulo
                    spec = importlib.util.spec_from_file_location("configuracao_impressora", abs_path)
                    module = importlib.util.module_from_spec(spec)
                    spec.loader.exec_module(module)
                    WindowClass = getattr(module, "ConfiguracaoImpressoraWindow")
                    
                elif action_title == "Relat√≥rio de Vendas de Produtos":
                    # Importa√ß√£o direta para o m√≥dulo de relat√≥rio de vendas
                    rel_path = self.action_to_py_file[action_title]
                    abs_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), rel_path)
                    
                    # Carregamento do m√≥dulo
                    spec = importlib.util.spec_from_file_location("relatorio_vendas_produtos", abs_path)
                    module = importlib.util.module_from_spec(spec)
                    spec.loader.exec_module(module)
                    WindowClass = getattr(module, "RelatorioVendasWindow")
                    
                    # Criar e exibir a janela
                    win = WindowClass()
                    # Adicionar refer√™ncia √† janela principal
                    if hasattr(win, 'set_janela_principal'):
                        win.set_janela_principal(self)
                    # Passar credenciais do usu√°rio e ID do funcion√°rio se a janela aceitar
                    if hasattr(win, 'set_credentials'):
                        win.set_credentials(self.usuario, self.empresa, self.id_funcionario)
                    win.setWindowTitle(action_title)
                    win.resize(900, 600)  # Definir tamanho da janela
                    win.show()
                    
                    # Conectar o sinal closeEvent para atualizar contadores quando a janela for fechada
                    original_close_event = win.closeEvent
                    
                    def novo_close_event(event):
                        # Chamar o closeEvent original
                        if original_close_event:
                            original_close_event(event)
                        # Atualizar contadores
                        self.atualizar_contadores()
                    
                    win.closeEvent = novo_close_event
                    
                    self.opened_windows.append(win)
                    return
                
                # Criar e exibir a janela
                win = WindowClass()
                # Adicionar refer√™ncia √† janela principal
                if hasattr(win, 'set_janela_principal'):
                    win.set_janela_principal(self)
                # Passar credenciais do usu√°rio e ID do funcion√°rio se a janela aceitar
                if hasattr(win, 'set_credentials'):
                    win.set_credentials(self.usuario, self.empresa, self.id_funcionario)
                win.setWindowTitle(action_title)
                win.show()
                
                # Conectar o sinal closeEvent para atualizar contadores quando a janela for fechada
                original_close_event = win.closeEvent
                
                def novo_close_event(event):
                    # Chamar o closeEvent original
                    if original_close_event:
                        original_close_event(event)
                    # Atualizar contadores
                    self.atualizar_contadores()
                
                win.closeEvent = novo_close_event
                
                self.opened_windows.append(win)
                return
                
            except Exception as e:
                print(f"Erro ao abrir {action_title}: {e}")
                import traceback
                traceback.print_exc()
        
        # Para os m√≥dulos n√£o especiais, use o m√©todo original
        if action_title not in self.action_to_py_file:
            print("A√ß√£o n√£o mapeada:", action_title)
            return
            
        rel = self.action_to_py_file[action_title]
        path = os.path.join(os.path.dirname(os.path.abspath(__file__)), rel)
        
        if not os.path.exists(path):
            print(f"ERRO: Arquivo n√£o existe: {path}")
            return
            
        # Definir nome da classe
        if action_title in self.action_to_class:
            cls_name = self.action_to_class[action_title]
        else:
            base = ''.join(c for c in self.normalize_text(action_title) if c.isalnum())
            cls_name = base + "Window"
            
        # Tentar importa√ß√£o direta (abordagem modificada para ser mais robusta)
        try:
            # Determinando o caminho do m√≥dulo para importa√ß√£o
            rel_path = rel.replace(os.sep, '.')
            module_name = os.path.splitext(rel_path)[0]
            
            # Tentar importa√ß√£o direta como pacote primeiro
            try:
                module_parts = module_name.split('.')
                if len(module_parts) > 1:
                    package = module_parts[0]
                    module = __import__(module_name, fromlist=[cls_name])
                    WindowClass = getattr(module, cls_name, None)
                else:
                    # Fallback para importa√ß√£o com importlib
                    raise ImportError("N√£o √© um pacote")
            except ImportError:
                # Importa√ß√£o com importlib como fallback
                spec = importlib.util.spec_from_file_location(module_name, path)
                if not spec:
                    raise ImportError(f"N√£o foi poss√≠vel criar spec para {path}")
                    
                module = importlib.util.module_from_spec(spec)
                spec.loader.exec_module(module)
                WindowClass = getattr(module, cls_name, None)
                
            if not WindowClass:
                raise ImportError(f"Classe {cls_name} n√£o encontrada no m√≥dulo {module_name}")
                
            # Criar e exibir a janela
            win = WindowClass()
            # Adicionar refer√™ncia √† janela principal
            if hasattr(win, 'set_janela_principal'):
                win.set_janela_principal(self)
            # Passar credenciais do usu√°rio e ID do funcion√°rio se a janela aceitar
            if hasattr(win, 'set_credentials'):
                win.set_credentials(self.usuario, self.empresa, self.id_funcionario)
            win.setWindowTitle(action_title)
            win.show()
            
            # Conectar o sinal closeEvent para atualizar contadores quando a janela for fechada
            original_close_event = win.closeEvent
            
            def novo_close_event(event):
                # Chamar o closeEvent original
                if original_close_event:
                    original_close_event(event)
                # Atualizar contadores
                self.atualizar_contadores()
            
            win.closeEvent = novo_close_event
            
            self.opened_windows.append(win)
            
        except Exception as e:
            print(f"ERRO ao importar/iniciar o m√≥dulo {action_title}: {e}")
            import traceback
            traceback.print_exc()
            print("N√£o foi poss√≠vel abrir a janela solicitada.")

    def closeEvent(self, event):
        """Manipula o evento de fechamento da janela principal"""
        try:
            # Fechar todas as janelas abertas, EXCETO o PDV
            for window in self.opened_windows:
                try:
                    # Verificar se a janela ainda existe e est√° vis√≠vel
                    if window and window.isVisible():
                        # Verificar se N√ÉO √© o PDV (por t√≠tulo ou tipo)
                        if window.windowTitle() != "PDV - Ponto de Venda":
                            print(f"Fechando janela: {window.windowTitle()}")
                            window.close()
                        else:
                            print("Mantendo PDV aberto")
                except Exception as e:
                    print(f"Erro ao fechar janela: {e}")
            
            # Limpar a lista de janelas abertas, mantendo apenas o PDV
            self.opened_windows = [w for w in self.opened_windows 
                                if w and w.isVisible() and w.windowTitle() == "PDV - Ponto de Venda"]
            
            # Parar timers
            if hasattr(self, 'timer_atualizacao'):
                self.timer_atualizacao.stop()
            if hasattr(self, 'timer_syncthing'):
                self.timer_syncthing.stop()
            
            # Fechar Syncthing
            try:
                from base.banco import fechar_syncthing
                fechar_syncthing()
            except Exception as e:
                print(f"Erro ao encerrar Syncthing: {e}")
        
        except Exception as e:
            print(f"Erro no closeEvent: {e}")
            import traceback
            traceback.print_exc()
        
        # Aceitar o evento para fechar a janela principal
        event.accept()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow(usuario="Marco", empresa="MB Sistemas")
    window.show()
    sys.exit(app.exec_())